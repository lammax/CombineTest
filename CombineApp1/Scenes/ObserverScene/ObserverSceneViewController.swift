//
//  ObserverSceneViewController.swift
//  CombineApp1
//
//  Created by Mac on 02.11.2019.
//  Copyright (c) 2019 Lammax. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MessageUI

protocol ObserverSceneDisplayLogic: class {
    func displaySomething(viewModel: ObserverScene.Something.ViewModel)
}

class ObserverSceneViewController: UIViewController {
    var interactor: ObserverSceneBusinessLogic?
    var router: (NSObjectProtocol & ObserverSceneRoutingLogic & ObserverSceneDataPassing)?

    @IBOutlet weak var verifyCodeTextField: UITextField!
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup
  
    private func setup() {
        
        ObserverSceneConfigurator.sharedInstance.configure(viewController: self)
        
    }
  
    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        doOnDidLoad()
    }

    // MARK: Do something

    func doOnDidLoad() {
        let notification = Notification.Name("NotificationL")
        let center = NotificationCenter.default
        
        /*let observer*/ _ = center.addObserver(forName: notification, object: nil, queue: OperationQueue()) { (notification) in
            print("Notification received")
        }
        
        center.post(name: notification, object: nil)
        
        center.removeObserver(notification)
        
        if #available(iOS 12.0, *) {
            self.verifyCodeTextField.textContentType = .oneTimeCode
            self.verifyCodeTextField.keyboardType = .numberPad
        }
    }
  
    @IBAction func buttonClicked(_ sender: UIButton) {
        let messageVC = MFMessageComposeViewController()
               messageVC.body = "Verification code: 12345";
               messageVC.recipients = ["89024672586"]
               messageVC.messageComposeDelegate = self
               self.present(messageVC, animated: true, completion: nil)
    }
}

extension ObserverSceneViewController: MFMessageComposeViewControllerDelegate {
    
    func messageComposeViewController(_ controller: MFMessageComposeViewController, didFinishWith result: MessageComposeResult) {
        switch (result) {
        case .cancelled:
            print("Message was cancelled")
            dismiss(animated: true, completion: nil)
        case .failed:
            print("Message failed")
            dismiss(animated: true, completion: nil)
        case .sent:
            print("Message was sent")
            dismiss(animated: true, completion: nil)
        default:
            break
        }
    }
    
}


extension ObserverSceneViewController: ObserverSceneDisplayLogic {
    
    func displaySomething(viewModel: ObserverScene.Something.ViewModel) {
        
    }

}

